import express from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import User from '../models/user.model.js';

const router = express.Router();

// ‚úÖ ‘≥÷Ä’°’∂÷Å’∏÷Ç’¥
router.post('/register', async (req, res) => {
  try {
    const { name, email, password } = req.body;

    // üîí ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ’ù ’¢’∏’¨’∏÷Ä ’§’°’∑’ø’•÷Ä’® ’¨÷Ä’°÷Å’æ’°’Æ ’•’∂
    if (!name || !email || !password) {
      return res.status(400).json({ message: '‘≤’∏’¨’∏÷Ä ’§’°’∑’ø’•÷Ä’® ’∫’°÷Ä’ø’°’§’´÷Ä ’•’∂÷â' });
    }

    // üîç ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ’ù ’Ø’°’û ’°÷Ä’§’µ’∏÷Ñ ’°÷Ä’§’•’∂ ÷Ö’£’ø’°’ø’•÷Ä ’°’µ’§ email-’∏’æ
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: '‘±’µ’Ω email-’∏’æ ÷Ö’£’ø’°’ø’•÷Ä ’°÷Ä’§’•’∂ ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’´÷â' });
    }

    // üîê ‘≥’°’≤’ø’∂’°’¢’°’º’´ hash
    const hashedPassword = await bcrypt.hash(password, 10);

    // üßæ ’ç’ø’•’≤’Æ’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä ÷Ö’£’ø’°’ø’•÷Ä
    const newUser = await User.create({
      name,
      email,
      password: hashedPassword,
    });

    // üîë ‘π’∏÷Ñ’•’∂ ’Ω’ø’•’≤’Æ’∏÷Ç’¥
    const token = jwt.sign({ id: newUser._id }, process.env.JWT_SECRET, {
      expiresIn: '1d',
    });

    res.status(201).json({
      user: {
        _id: newUser._id,
        name: newUser.name,
        email: newUser.email,
      },
      token,
    });
  } catch (err) {
    console.error('‚ùå Register error:', err);
    res.status(500).json({ message: '’ç’•÷Ä’æ’•÷Ä’∏÷Ç’¥ ’Ω’≠’°’¨ ’ß ’ø’•’≤’´ ’∏÷Ç’∂’•÷Å’•’¨÷â' });
  }
});

// ‚úÖ ’Ñ’∏÷Ç’ø÷Ñ
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // üîç ’ç’ø’∏÷Ç’£’∏÷Ç’¥’ù ’¨÷Ä’°÷Å’æ’°’Æ ’•’∂ ’§’°’∑’ø’•÷Ä’®
    if (!email || !password) {
      return res.status(400).json({ message: '’Ñ’∏÷Ç’ø÷Ñ ’£’∏÷Ä’Æ’•’¨’∏÷Ç ’¢’∏’¨’∏÷Ä ’§’°’∑’ø’•÷Ä’® ’∫’°÷Ä’ø’°’§’´÷Ä ’•’∂÷â' });
    }

    // üîç ’ï’£’ø’°’ø’´÷Ä’∏’ª ’Ω’ø’∏÷Ç’£’∏÷Ç’¥
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: '’ï’£’ø’°’ø’•÷Ä’® ’π’´ ’£’ø’∂’æ’•’¨÷â' });
    }

    // üß™ ‘≥’°’≤’ø’∂’°’¢’°’º’´ ’∞’°’¥’•’¥’°’ø’∏÷Ç’¥
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: '’ç’≠’°’¨ ’£’°’≤’ø’∂’°’¢’°’º ’Ø’°’¥ email÷â' });
    }

    // üîê ‘π’∏÷Ñ’•’∂
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: '1d',
    });

    res.status(200).json({
      user: {
        _id: user._id,
        name: user.name,
        email: user.email,
      },
      token,
    });
  } catch (err) {
    console.error('‚ùå Login error:', err);
    res.status(500).json({ message: '’ç’•÷Ä’æ’•÷Ä’∏÷Ç’¥ ’Ω’≠’°’¨ ’ß ’ø’•’≤’´ ’∏÷Ç’∂’•÷Å’•’¨÷â' });
  }
});

export default router;
